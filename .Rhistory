filter(test,lbl=='4')
data.frame(filter(test,lbl=='4'))
test <- filter(turner.clones,genome=='REL4397')
filter(test,lbl=='4')
data.frame(filter(test,lbl=='4'))
data.frame(filter(turner.clones,genome=='REL4398',lbl=='4'))
mut.df <- turner.clones
top.hit.labels
data.frame(top.hit.labels)
turner.clones
levels(turner.clones$genome)
test1 <- unique(turner.clones$genome)
match(test1,levels(turner.clones$genome))
top.hit.labels
top.hit.labels$lbl
test <- filter(no.B.genomes,lbl=='3')
test
data.frame(test)
levels(top.hit.labels$lbl)
levels(no.B.genomes$lbl)
levels(top.hit.labels$lbl)
levels(no.B.genomes$lbl)
mut.df <- turner.clones
filter(mut.df,lbl=='2')
filter(turner.clones,lbl=='5')
turner.clones$frequency
turner.clones
test
test2
unique(test2$genome)
test
REL4397.diffs
REL4398.diffs
data.frame(REL4397.diffs)
unique(test1$gene.annotation)
unique(test2$gene.annotation)
REL4397.diffs
REL4398.diffs
head(REL4397.data)
head(REL4398.data)
setdiff(REL4397.diffs,REL4398.diffs)
REL4397.diffs
REL4398.diffs
REL4398.diffs %>% filter(mut.annotation == 'indel')
REL4398.diffs %>% filter(mut.annotation == 'indel') %>% data.frame
REL4397.diffs %>% filter(mut.annotation == 'indel') %>% data.frame
REL4397
REL4397.diffs
data.frame(REL4397.diffs)
test1
test2
test1
test2
data.frame(test1)
data.frame(test2)
REL4397.diffs2
REL4397.diffs2
REL4397.diffs2 %>% data.frame
REL4397.diffs
REL4397.diffs %>% data.frame
REL4398.diffs %>% filter(gene.annotation=='lacY')
Fig6 <- plot_grid(Fig6A, Fig6B, Fig6C, labels = c("A", "B", "C"), ncol = 1)
4629812/400
4629812/400000
facet_grid
4629812/556
labeled.mutations <- tbl_df(read.csv("../results/labeled_mutations.csv")) %>%
    mutate(lbl=as.factor(lbl)) %>%
    mutate(rotated.position=rotate.chr(position))
fixed.erasures
genes.to.label
top.fixed.erasures
new.replacements
new.replacements$delta.freq
new.replacements2
new.replacements2
data.frame(new.replacements2)
fixed.erasures
top.fixed.erasures
new.replacements
data.frame(new.replacements)
new.replacements2
new.replacements
data.frame(new.replacements)
fixed.erasures
top.fixed.erasures
top.fixed.erasures
data.frame(top.fixed.erasures)
test <- evoexp.labeled.mutations
test2 <- filter(test,lbl==3,gene.annotation %in% genes.to.label$gene.annotation)
genes.to.label
test2 <- filter(test,lbl==3,gene.annotation %in% genes.to.label$Gene.name)
test2
data.frame(test2)
test3 <- filter(test2,lineage=='Ara+1')
test3
data.frame(test3)
top.fixed.erasures
new.replacements
head(odd.genomes)
test <- filter(odd.genomes,gene.annotation=='malT')
tet
test
data.frame(test)
test <- filter(odd.genomes,gene.annotation=='malT',lbl==4)
test
test <- filter(labeled.mutations,gene.annotation=='malT',lbl==4)
test
gene.convs.G.score <- filter(G.score.data, Gene.name %in% gene.convs$gene.annotation)
gene.convs.G.score
mean(gene.convs.G.score$G.score)
gene.convs.G.score$G.score
rest.new.odd.G.score
rest.new.odd.G.score$G.score
mean(rest.new.odd.G.score$G.score)
gene.convs.G.score.summary
gene.convs
gene.convs$G.score
gene.convs.G.score
gene.convs.G.score$G.score
median(rest.new.odd.G.score)
median(rest.new.odd.G.score$G.score)
mean(rest.new.odd.G.scores)
rest.new.odd.G.scores)
rest.new.odd.G.scores
rest.new.odd.G.scores
rest.new.odd.G.score
rest.new.odd.G.score.summary
rest.new.G.score
rest.new.odd.G.score
rest.new.odd.G.score$G.score
gene.convs.G.score.summary
test1 <- odd.genomes %>% filter(lineage=='Ara+1')
test1 <- odd.genomes %>% filter(lineage=='Ara+1',lbl==4)
test1
test1 <- odd.genomes %>% filter(lineage=='Ara-3',lbl==4)
test1
test1 <- odd.genomes %>% filter(lineage=='Ara-4',lbl==4)
test1
test <- rest.new.odd.G.score %>% filter(lineage=='Ara+1')
rest.new.odd.G.score
new.odd.mutations %>% filter(lineage=='Ara+1')
rest.new.odd.mutations
rest.new.odd.mutations %>% filter(lineage=='Ara+1')
rest.new.odd.mutations %>% filter(lineage=='Ara-3')
rest.new.odd.mutations %>% filter(lineage=='Ara-4')
length.test
length.test.data <- filter(odd.K12.chunks,!lineage %in% skip.me)
length.test.data
odd.K12.chunk
odd.K12.chunks
unique(length.test.data$lineage)
rest.new.muts.summary
rest.new.odd.mutations
rest.new.odd.dS
data.frame(rest.new.odd.dS)
special.G.score
data.frame(special.G.score)
head(STLE.evoexp.F.coverage)
test <- filter(STLE.evoexp.F.coverage,Lineage=='Ara+3',Generation==1200)
test
Table2.df
replaced.gene.list
data.frame(replaced.gene.list)
replaced.gene.list
gene.convs
gene.convs.summary
gene.convs.summary
gene.convs
data.frame(gene.convs)
gene.convs.summary
head(odd.mutations)
head(odd.genomes)
test <- filter(odd.genomes,gene.annotation=='ECB_03438')
test
data.frame(test)
rest.new.odd.G.score.summary
gene.convs.G.score
gene.convs.G.score.summary
test <- odd.genomes %>% filter(lbl=='4')
test
data.frame(test)
rest.new.odd.dN
data.frame(rest.odd.dN)
data.frame(rest.new.odd.dN)
replaced.odd.dN
replaced.odd.dN
data.frame(replaced.odd.dN)
replaced.odd.dN
replaced.odd.dS
replaced.odd.dS
rest.new.odd.dS
replaced.odd.dN
replaced.odd.dN.summary
rest.new.odd.dN.summary
replaced.vs.new.model
conf.int(replaced.vs.new.model)
confint(replaced.vs.new.model)
replaced.vs.new.model
replaced.vs.new.model
)
rest.new.odd.dN
rest.new.odd.dN.summary
replaced.odd.dN.summary
replaced.odd.dN.summary
rest.new.odd.dN.summary
rest.new.odd.dN.summary
replaced.odd.dN.summary
rest.new.odd.dN.summary
rest.new.odd.dN.summary
rest.new.odd.dN
replaced.odd.dN
replaced.odd.dN.summary
rest.new.odd.dN.summary
3+8+8+1+4+3+3
rest.new.odd.dN.summary
special.G.score
top.new.odd.mutations
G.score.rest.new.odd.mutations
G.score.data
gene.convs
gene.convs.dN
gene.convs.G.score.summary
rest.new.odd.G.score.summary
gene.convs.G.score.summary
new.dN.G.score.summary
new.not.dN.G.score.summary
gene.convs.G.score.summary
dN.gene.convs.G.score
not.dN.gene.convs
new.dN.G.score
new.not.dN.G.score
new.not.dN.G.score.summary
new.mutation.G.score
)
new.mutation.G.score.summary
rest.new.odd.dS
data.frame(rest.new.odd.dS)
rest.new.noncoding
levels(odd.genomes$mut.annotation)
rest.new.noncoding
quartz()
test
test.rest.new.not.dN
data.frame(test.rest.new.not.dN)
test
data.frame(rest.new.not.dN)
1:10
nrow(rest.new.now.dN)
nrow(rest.new.dS)
rest.new.not.dN$index
rest.new.now.dN$index
rest.new.not.dN$index
rest.new.not.dN$index
test
test
total.LTEE.markers
green.markers
head(odd.LTEE.chunks)
new.muts1
new.muts2
odd.LTEE.chunks$lbl
odd.LTEE.chunks
rest.new.dS
data.frame(rest.new.dS)
LTEE.chunks
odd.LTEE.chunks
test <- odd.LTEE.chunks %>% filter(lineage=='Ara+1')
test
test2 <- odd.K12.chunks %>% filter(lineage=='Ara+1')
test2
data.frame(test)
rest.new.dS2
test.new.dS
rest.new.dS
odd.genome.chunks
rest.new.dS2
data.frame(rest.new.dS2)
odd.genome.chunks
test <- filter(odd.genome.chunks,lbl=='3')
test
test <- calc.indel.change(odd.genomes)
test
test2 <- filter(test,lbl=='3',mut.annotation=='dS')
test2
test
test2 <- filter(test,mut.annotation=='dS')
test2
new.mutations
gene.convs
test <- gene.convs %>% filter(K12.chunk==TRUE)
test
K12.gene.convs <- gene.convs %>%filter(in.K12.chunk==TRUE)
K12.gene.convs <- gene.convs %>%filter(K12.chunk==TRUE)
LTEE.gene.convs <- gene.convs %>%filter(K12.chunk==FALSE)
K12.gene.convs
LTEE.gene.convs
gene.convs
dN.gene.convs
dN.gene.convs %>% filter(K12.chunk==TRUE)
rest.new.mutations
B.new.mutations
rest.new.dS
rest.new.noncoding
data.frame(rest.new.noncoding)
data.frame(rest.new.dS)
data.frame(rest.new.dS)
recomb.mut.ratio.table
recomb.mut.ratio.table <- group_by(labeled.mutations,genome) %>% calc.indel.change() %>%
    filter(mut.annotation=='dS') %>% filter(K12.chunk == FALSE) ## filter out dS in K-12 chunk.
recomb.mut.ratio.table
recomb.mut.ratio.table
trecomb.mut.ratio.table
recomb.mut.ratio.table
gene.convs
recomb.mut.ratio.table
data.frame(recomb.mut.ratio.table)
B.new.even.dS
data.frame(B.new.even.dS)
all.new.dS
all.new.dS
rest.new.dS
7/24000
7/(24000*REL606.LENGTH)
7/(24000*REL606.LENGTH)
5/(12000*REL606.LENGTH)
7/(24000*941000)
5/(12000*941,000)
5/(12000*941000)
5/(12000)
all.new.dS
rest.new.mutations
test <- filter(rest.new.mutations,mut.annotation=='dS')
test
10/1000
10/(1000*970000)
10/(12000*970000)
donor.mutations
data.frame(donor.mutations)
levels(donor.mutations$genome)
levels(labeled.mutations$lineage)
levels(labeled.mutations$lineage)
levels(labeled.mutations$genome)
levels(donor.mutations$genome)
levels(donor.mutations$genome)
levels(donor.mutations$lineage)
levels(donor.mutations$genome)
test <- filter(donor.mutations,lineage=='Ara+2')
test
test <- filter(donor.mutations,lineage=='Ara+3')
test
test <- filter(labeled.mutations,lbl == 6 | lbl==7 | lbl == 8 | lbl == 9)
    mutate(genome=factor(paste(lineage,genome,sep=': '))) %>%
    arrange(genome)
test <- filter(labeled.mutations,lbl == 6 | lbl==7 | lbl == 8 | lbl == 9)
test
filter(test,lineage=='Ara+2')
filter(test,lineage=='Ara+3')
test <- labeled.mutations %>% filter(lineage =='Ara+3',odd=FALSE)
test <- labeled.mutations %>% filter(lineage =='Ara+3',odd==FALSE)
test
test1 <- filter(test,lbl==1)
test1
test2 <- filter(test,lbl==4)
test2
data.frame(test2)
test <- labeled.mutations %>% filter(lineage =='Ara+3',odd==TRUE)
test1 <- filter(test,lbl==1)
test2 <- filter(test,lbl==4)
test2
turner.clones <- tbl_df(read.csv("../results/turner_clones_labeled_mutations.csv")) %>%
    mutate(lbl=as.factor(lbl)) %>%
    mutate(rotated.position=rotate.chr(position))
donot.mutations
donor.mutations
levels(donor.mutations$genome)
B.new.even.dS
all.new.dS
K12.new.odd.dS
data.frame(Table2.df)
gene.convs.summary
recomb.mut.ratio.table
data.frame(recomb.mut.ratio.table)
new.dN.G.score.summary
new.not.dN.G.score.summary
gene.convs.G.score.summary
head(odd.genomes)
ara3.odd <- filter(odd.genomes,lineage=='Ara-3')
ara3.even <- filter(even.genomes,lineage=='Ara-3')
ara3.even
ara3.odd
ara3.odd <- select(ara3.odd,-odd)
ara3.even <- select(ara3.even,-even)
ara3.even <- select(ara3.even,-odd)
ara3.odd
ara3.even
test <- setdiff(ara3.odd,ara3.even)
test
ara3.odd <- select(ara3.odd,-genome,-frequency)
ara3.even <- select(ara3.even,-genome,-frequency)
test <- setdiff(ara3.odd,ara3.even)
test
test2 <- filter(test,mut.annotation=='dN')
test2
data.frame(test2)
K12.diff.data
K12.diff.data2 <- K12.diff.data %>% filter(mut.annotation == 'dS' | mut.annotation == 'dN')
K12.diff.data2
K12.diff.data3 <- K12.diff.data %>% filter(mut.annotation == 'indel')
K12.diff.data3
data.frame(K12.diff.data3)
odd.genome.chunks
head(odd.genome.chunks$chunk.transitions)
introgression.vs.divergence.data
K12.diff.data
divergence.data
junctions.in.bins
junctions.vs.divergence
junctions.vs.divergence
quartz()
FigS4.B
FigS4.B
FigS4.B
FigS4.B
junctions.vs.divergence
FigS4.B
FigS4.B
FigS4.B
FigS4.B
junctions.vs.divergence
junctions.vs.divergence
FigS4.B
FigS4.B
FigS4.C
FigS4.D
sum(right.junctions.vs.divergence$are.junctions)
sum(right.junctions.vs.divergence$are.junctions)
sum(left.junctions.vs.divergence$are.junctions)
sum(junctions.vs.divergence$are.junctions)
two.classed.introgression
two.classed.introgression.data
filter(two.classed.introgression.data,introgression==0)
FigS4.A
FigS4.A
FigS4.A
FigS4.A
two.classed.introgression.data
FigS4B
FigS4B
two.classed.introgression.data
two.classed.introgression.data
two.classed.introgression.data$introgression
two.class.introgression.data 
levels(two.class.introgression.data$introgression)
levels(two.class.introgression.data$introgression)
levels(two.class.introgression.data$introgression)
FigS4B
levels(two.class.introgression.data$introgression)
FigS4B
FigS4B
levels(two.class.introgression.data$introgression)
FigS4B
quartz()
FigS4B
FigS4B
FigS4B
FigS4B
FigS4B
levels(two.class.introgression.data$introgression)
FigS4B
FigS4B
two.class.introgression.data
levels(two.class.introgression.data$introgression)
levels(two.class.introgression.data$introgression)
FigS4B
quartz()
FigS4B
FigS4B
FigS4B
two.class.introgression.data
FigS4B
quartz()
FigS4B
levels(introgression.vs.divergence.data)
levels(introgression.vs.divergence.data$introgresson)
levels(introgression.vs.divergence.data$introgression)
levels(two.class.introgression.data$introgression)
levels(two.class.introgression.data$introgression)
)
quartz()
top.LTEE.evoexp.mutations <- evoexp.data %>% filter(gene.annotation %in% top.G.score.genes$Gene.name) %>%/

top.LTEE.evoexp.mutations
top.LTEE.evoexp.mutations
top.LTEE.evoexp.markers
K12.diff.data
test <- K12.diff.data %>% filter(mut.type != 'SNP')
test
levels(test$mutation)
test$mutatino
test$mutation
