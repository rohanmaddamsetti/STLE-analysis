#!/usr/bin/python

'''

BLAST-F-plasmid-form.py by Rohan Maddamsetti.

Rry to determine whether F-plasmid is integrated in chromosome or is in a
plasmid form by BLASTing oriT F-plasmid against de novo assemblies.

'''

from subprocess import run
from os import listdir, environ, makedirs
from os.path import join, exists, dirname, split, basename
import sys
from Bio.Blast import NCBIXML
from Bio import SeqIO
from Bio.SeqFeature import ExactPosition

##put the path from bash into the path in this script.
mypath = environ['PATH']
sys.path.append(mypath)

def makeBLASTdbs(scaffolds_file,blastdir):
    my_genome = split(dirname(scaffolds_file))[1]
    args = ['makeblastdb', '-in', scaffolds_file, '-dbtype', 'nucl',
                        '-input_type', 'fasta', '-out', join('.',my_genome), '-title', my_genome]
    run(args,cwd=blastdir)

def runBLAST(results_dir,queryfile):
    my_genome = basename(results_dir)
    blast_cmd = ["blastn", "-task", "megablast", "-db", my_genome,
                 "-outfmt", "5", "-max_target_seqs", "1",
                 "-query", queryfile, "-out",
                 "./results.xml"]
    run(blast_cmd, cwd=results_dir)

def parseBLASTresults():
    '''grep_patterns is a list of patterns used to select subsets of the
	hgt.fst sequences
    based on matching a pattern in the name. This is not a regex, but a
    substring in the current implementation.'''
    HGT_hits = {}
    ##preprocess the reference genome.
    gene_starts = {}
    gene_ends = {}
    ref_genome = SeqIO.read("REL606.gbk", "genbank")
    for feature in ref_genome.features:
        if feature.type != "CDS":
            continue
        else:
            cur_locus_tag = feature.qualifiers['locus_tag'][0]
            cur_start = feature.location.start
            cur_end = feature.location.end
            ##print cur_start, cur_end, cur_locus_tag
            gene_starts[cur_locus_tag] = cur_start
            gene_ends[cur_locus_tag] = cur_end
    all_results = [x for x in listdir("output") if x.endswith(".xml")]
    for cur_blast_output in all_results:
        result_handle = open("output/" + cur_blast_output)
        blast_record = next(NCBIXML.parse(result_handle))
        for alignment in blast_record.alignments:
            for hsp in alignment.hsps:
                if hsp.expect < 0.0000000001:
                    ##print('HIT!')
                    ##print(alignment, cur_blast_output)
                    e_value = hsp.expect
                    subject_start = hsp.sbjct_start
                    subject_end = hsp.sbjct_end
                    ##enforce that subject_start < subject_end.
                    if subject_end < subject_start:
                        temp = subject_end
                        subject_end = subject_start
                        subject_start = temp
                    subject_start = ExactPosition(subject_start)
                    subject_end = ExactPosition(subject_end)
                    ##print e_value, subject_start, subject_end
                    ##extract the locus_tags of all genes present in this range.
                    starts_before_or_in_range = [x for x in gene_starts.keys() if gene_starts[x] < subject_end]
                    ends_in_or_after_range = [y for y in gene_ends.keys() if gene_ends[y] > subject_start]
                    ##print(starts_before_or_in_range)
                    ##print(ends_in_or_after_range)
                    loci_in_range = [z for z in starts_before_or_in_range if z in ends_in_or_after_range]
                    ##print(loci_in_range)
                    for locus in loci_in_range:
                        try:
                            HGT_hits[locus] = HGT_hits[locus] + 1
                        except KeyError:
                            HGT_hits[locus] = 1
    ##Now print the results to a csv file.
    ##pipe to output as so: 'python hgt_analysis.py > out.csv
    print("locus_tag,HGT.hits")
    for tag in sorted(HGT_hits.keys()):
        print(tag + "," + str(HGT_hits[tag]))

def main():
    projdir = "/Users/Rohandinho/Desktop/Projects/STLE-analysis"
    denovos = join(projdir,"denovo-assemblies")
    queryfile = join(projdir,"references/F-plasmid.fasta")
    for f in listdir(denovos):
        if not f.startswith('REL') and not f.startswith('RM'):
            continue
        full_f = join(denovos,f)
        this_scaffolds = join(full_f,'scaffolds.fasta')
        BLASTresultdir = join(projdir,"results/BLAST-F-plasmid-form/",f)
        if not exists(BLASTresultdir):
            makedirs(BLASTresultdir)
        ## The following two lines are commented out because they only need
        ## to be run once for the analysis.
        #makeBLASTdbs(this_scaffolds,BLASTresultdir)
        #runBLAST(BLASTresultdir,queryfile)


        ##parseBLASTresults()

main()
